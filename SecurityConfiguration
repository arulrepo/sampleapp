package com.dashboard.app.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	@Qualifier("customUserDetailsService")
	UserDetailsService userDetailsService;

	@Autowired
	public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception {
		// auth.userDetailsService(userDetailsService);
		// auth.authenticationProvider(authenticationProvider());

		auth.inMemoryAuthentication().withUser("ProjectManager").password("test").roles("PROJ_ADMIN","QA_ADMIN","BA_ADMIN");
		auth.inMemoryAuthentication().withUser("QualityAnalyst").password("test").roles("QA_ADMIN");
		auth.inMemoryAuthentication().withUser("BusinessAnalyst").password("test").roles("BA_ADMIN");

	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
//		 http.authorizeRequests()
//	        .antMatchers("/admin/**").access("hasRole('ADMIN')")
//	        .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')")
//	        .and().formLogin().loginPage("/login")
//	        .usernameParameter("ssoId").passwordParameter("password")
//	        .and().csrf()
//	        .and().exceptionHandling().accessDeniedPage("/Access_Denied");
		
		http.authorizeRequests().antMatchers("/project/**").access("hasRole('PROJ_ADMIN')").antMatchers("/issue/**")
				.access("hasRole('QA_ADMIN') or hasRole('PROJ_ADMIN')").antMatchers("/testcase/**")
				.access("hasRole('PROJ_ADMIN') or hasRole('BA_ADMIN')").and().formLogin().loginPage("/login")
				.loginProcessingUrl("/login").usernameParameter("ssoId").passwordParameter("password").and().csrf()
				.and().exceptionHandling().accessDeniedPage("/Access_Denied");
	}

	

}
